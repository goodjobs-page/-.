// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/logging/v2/logging.proto

#include "google/cloud/logging/logging_service_v2_connection.gcpcxx.pb.h"
#include "google/cloud/logging/internal/logging_service_v2_stub_factory.gcpcxx.pb.h"
#include "google/cloud/internal/retry_loop.h"
#include "google/cloud/internal/user_agent_prefix.h"
#include <memory>

namespace google {
namespace cloud {
inline namespace GOOGLE_CLOUD_CPP_NS {
namespace logging {

std::string LoggingServiceV2ConnectionOptionsTraits::default_endpoint() {
  return "logging.googleapis.com";
}

std::string LoggingServiceV2ConnectionOptionsTraits::user_agent_prefix() {
  return google::cloud::internal::UserAgentPrefix();
}

int LoggingServiceV2ConnectionOptionsTraits::default_num_channels() {
  return 4;
}

LoggingServiceV2Connection::~LoggingServiceV2Connection() = default;

Status LoggingServiceV2Connection::DeleteLog(
    ::google::logging::v2::DeleteLogRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<::google::logging::v2::WriteLogEntriesResponse>
LoggingServiceV2Connection::WriteLogEntries(
    ::google::logging::v2::WriteLogEntriesRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

ListLogEntriesRange LoggingServiceV2Connection::ListLogEntries(
    ::google::logging::v2::ListLogEntriesRequest request) {
  return google::cloud::internal::MakePaginationRange<ListLogEntriesRange>(
      std::move(request),
      [](::google::logging::v2::ListLogEntriesRequest const&) {
        return StatusOr<::google::logging::v2::ListLogEntriesResponse>{};
      },
      [](::google::logging::v2::ListLogEntriesResponse const&) {
        return std::vector<::google::logging::v2::LogEntry>();
      });
}

ListMonitoredResourceDescriptorsRange
LoggingServiceV2Connection::ListMonitoredResourceDescriptors(
    ::google::logging::v2::ListMonitoredResourceDescriptorsRequest request) {
  return google::cloud::internal::MakePaginationRange<
      ListMonitoredResourceDescriptorsRange>(
      std::move(request),
      [](::google::logging::v2::
             ListMonitoredResourceDescriptorsRequest const&) {
        return StatusOr<
            ::google::logging::v2::ListMonitoredResourceDescriptorsResponse>{};
      },
      [](::google::logging::v2::
             ListMonitoredResourceDescriptorsResponse const&) {
        return std::vector<::google::api::MonitoredResourceDescriptor>();
      });
}

ListLogsRange LoggingServiceV2Connection::ListLogs(
    ::google::logging::v2::ListLogsRequest request) {
  return google::cloud::internal::MakePaginationRange<ListLogsRange>(
      std::move(request),
      [](::google::logging::v2::ListLogsRequest const&) {
        return StatusOr<::google::logging::v2::ListLogsResponse>{};
      },
      [](::google::logging::v2::ListLogsResponse const&) {
        return std::vector<std::string>();
      });
}

namespace {
std::unique_ptr<LoggingServiceV2RetryPolicy> DefaultRetryPolicy() {
  return LoggingServiceV2LimitedTimeRetryPolicy(std::chrono::minutes(30))
      .clone();
}

std::unique_ptr<BackoffPolicy> DefaultBackoffPolicy() {
  auto constexpr kBackoffScaling = 2.0;
  return ExponentialBackoffPolicy(std::chrono::seconds(1),
                                  std::chrono::minutes(5), kBackoffScaling)
      .clone();
}

class LoggingServiceV2ConnectionImpl : public LoggingServiceV2Connection {
 public:
  explicit LoggingServiceV2ConnectionImpl(
      std::shared_ptr<logging_internal::LoggingServiceV2Stub> stub,
      std::unique_ptr<LoggingServiceV2RetryPolicy> retry_policy,
      std::unique_ptr<BackoffPolicy> backoff_policy,
      std::unique_ptr<LoggingServiceV2ConnectionIdempotencyPolicy>
          idempotency_policy)
      : stub_(std::move(stub)),
        retry_policy_prototype_(std::move(retry_policy)),
        backoff_policy_prototype_(std::move(backoff_policy)),
        idempotency_policy_(std::move(idempotency_policy)) {}

  explicit LoggingServiceV2ConnectionImpl(
      std::shared_ptr<logging_internal::LoggingServiceV2Stub> stub)
      : LoggingServiceV2ConnectionImpl(
            std::move(stub), DefaultRetryPolicy(), DefaultBackoffPolicy(),
            MakeDefaultLoggingServiceV2ConnectionIdempotencyPolicy()) {}

  ~LoggingServiceV2ConnectionImpl() override = default;

  Status DeleteLog(
      ::google::logging::v2::DeleteLogRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->DeleteLog(request),
        [this](grpc::ClientContext& context,
               ::google::logging::v2::DeleteLogRequest const& request) {
          return stub_->DeleteLog(context, request);
        },
        request, __func__);
  }

  StatusOr<::google::logging::v2::WriteLogEntriesResponse> WriteLogEntries(
      ::google::logging::v2::WriteLogEntriesRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->WriteLogEntries(request),
        [this](grpc::ClientContext& context,
               ::google::logging::v2::WriteLogEntriesRequest const& request) {
          return stub_->WriteLogEntries(context, request);
        },
        request, __func__);
  }

  ListLogEntriesRange ListLogEntries(
      ::google::logging::v2::ListLogEntriesRequest request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<LoggingServiceV2RetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListLogEntries(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<ListLogEntriesRange>(
        std::move(request),
        [stub, retry, backoff, idempotency,
         function_name](::google::logging::v2::ListLogEntriesRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](
                  grpc::ClientContext& context,
                  ::google::logging::v2::ListLogEntriesRequest const& request) {
                return stub->ListLogEntries(context, request);
              },
              r, function_name);
        },
        [](::google::logging::v2::ListLogEntriesResponse r) {
          std::vector<::google::logging::v2::LogEntry> result(
              r.entries().size());
          auto& messages = *r.mutable_entries();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  ListMonitoredResourceDescriptorsRange ListMonitoredResourceDescriptors(
      ::google::logging::v2::ListMonitoredResourceDescriptorsRequest request)
      override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<LoggingServiceV2RetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency =
        idempotency_policy_->ListMonitoredResourceDescriptors(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        ListMonitoredResourceDescriptorsRange>(
        std::move(request),
        [stub, retry, backoff, idempotency,
         function_name](::google::logging::v2::
                            ListMonitoredResourceDescriptorsRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](
                  grpc::ClientContext& context,
                  ::google::logging::v2::
                      ListMonitoredResourceDescriptorsRequest const& request) {
                return stub->ListMonitoredResourceDescriptors(context, request);
              },
              r, function_name);
        },
        [](::google::logging::v2::ListMonitoredResourceDescriptorsResponse r) {
          std::vector<::google::api::MonitoredResourceDescriptor> result(
              r.resource_descriptors().size());
          auto& messages = *r.mutable_resource_descriptors();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  ListLogsRange ListLogs(
      ::google::logging::v2::ListLogsRequest request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<LoggingServiceV2RetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListLogs(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<ListLogsRange>(
        std::move(request),
        [stub, retry, backoff, idempotency,
         function_name](::google::logging::v2::ListLogsRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](grpc::ClientContext& context,
                     ::google::logging::v2::ListLogsRequest const& request) {
                return stub->ListLogs(context, request);
              },
              r, function_name);
        },
        [](::google::logging::v2::ListLogsResponse r) {
          std::vector<std::string> result(r.log_names().size());
          auto& messages = *r.mutable_log_names();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

 private:
  std::shared_ptr<logging_internal::LoggingServiceV2Stub> stub_;
  std::unique_ptr<LoggingServiceV2RetryPolicy const> retry_policy_prototype_;
  std::unique_ptr<BackoffPolicy const> backoff_policy_prototype_;
  std::unique_ptr<LoggingServiceV2ConnectionIdempotencyPolicy>
      idempotency_policy_;
};
}  // namespace

std::shared_ptr<LoggingServiceV2Connection> MakeLoggingServiceV2Connection(
    LoggingServiceV2ConnectionOptions const& options) {
  return std::make_shared<LoggingServiceV2ConnectionImpl>(
      logging_internal::CreateDefaultLoggingServiceV2Stub(options));
}

std::shared_ptr<LoggingServiceV2Connection> MakeLoggingServiceV2Connection(
    LoggingServiceV2ConnectionOptions const& options,
    std::unique_ptr<LoggingServiceV2RetryPolicy> retry_policy,
    std::unique_ptr<BackoffPolicy> backoff_policy,
    std::unique_ptr<LoggingServiceV2ConnectionIdempotencyPolicy>
        idempotency_policy) {
  return std::make_shared<LoggingServiceV2ConnectionImpl>(
      logging_internal::CreateDefaultLoggingServiceV2Stub(options),
      std::move(retry_policy), std::move(backoff_policy),
      std::move(idempotency_policy));
}

std::shared_ptr<LoggingServiceV2Connection> MakeLoggingServiceV2Connection(
    std::shared_ptr<logging_internal::LoggingServiceV2Stub> stub,
    std::unique_ptr<LoggingServiceV2RetryPolicy> retry_policy,
    std::unique_ptr<BackoffPolicy> backoff_policy,
    std::unique_ptr<LoggingServiceV2ConnectionIdempotencyPolicy>
        idempotency_policy) {
  return std::make_shared<LoggingServiceV2ConnectionImpl>(
      std::move(stub), std::move(retry_policy), std::move(backoff_policy),
      std::move(idempotency_policy));
}

}  // namespace logging
}  // namespace GOOGLE_CLOUD_CPP_NS
}  // namespace cloud
}  // namespace google
