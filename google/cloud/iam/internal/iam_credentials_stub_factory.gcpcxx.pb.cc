// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/iam/credentials/v1/iamcredentials.proto

#include "google/cloud/iam/internal/iam_credentials_stub_factory.gcpcxx.pb.h"
#include "google/cloud/iam/internal/iam_credentials_logging_decorator.gcpcxx.pb.h"
#include "google/cloud/iam/internal/iam_credentials_metadata_decorator.gcpcxx.pb.h"
#include "google/cloud/iam/internal/iam_credentials_stub.gcpcxx.pb.h"
#include "google/cloud/log.h"
#include <memory>

namespace google {
namespace cloud {
inline namespace GOOGLE_CLOUD_CPP_NS {
namespace iam_internal {

std::shared_ptr<IAMCredentialsStub> CreateDefaultIAMCredentialsStub(
    iam::IAMCredentialsConnectionOptions const& options) {
  auto channel =
      grpc::CreateCustomChannel(options.endpoint(), options.credentials(),
                                options.CreateChannelArguments());
  auto service_grpc_stub =
      ::google::iam::credentials::v1::IAMCredentials::NewStub(channel);
  std::shared_ptr<IAMCredentialsStub> stub =
      std::make_shared<DefaultIAMCredentialsStub>(std::move(service_grpc_stub));

  stub = std::make_shared<IAMCredentialsMetadata>(std::move(stub));

  if (options.tracing_enabled("rpc")) {
    GCP_LOG(INFO) << "Enabled logging for gRPC calls";
    stub = std::make_shared<IAMCredentialsLogging>(std::move(stub),
                                                   options.tracing_options());
  }
  return stub;
}

}  // namespace iam_internal
}  // namespace GOOGLE_CLOUD_CPP_NS
}  // namespace cloud
}  // namespace google
