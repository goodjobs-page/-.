/*!

@mainpage Google Cloud Storage C++ Client Library

The Google Cloud Storage (GCS) C++ Client library offers types and functions
access GCS from C++11 applications. It offers full access to the GCS API,
including operations to list, read, write, and delete
[GCS objects][object-definition-link] and [buckets][bucket-definition-link].
The library also provides functions to modify the IAM permissions on buckets,
read and modify the metadata associated with objects and buckets, configure
encryption keys, configure notifications via Cloud Pub/Sub, and change the
access control list of object or buckets.

This library requires a C++11 compiler, it is supported (and tested) on multiple
Linux distributions, as well as Windows and macOS. The
[top-level README][github-readme] on [GitHub][github-link] provides detailed
instructions to install the necessary dependencies, as well as how to compile
the client library.

## Quickstart

The following instructions show you how to perform basic tasks in Cloud Storage
using the C++ client library.

Costs that you incur in Cloud Storage are based on the resources you use. This
quickstart typically uses less than $0.01USD worth of Cloud Storage resources.

If you have never used Cloud Storage we recommend that you first follow one of
the [language neutral quickstart guides][gcs-quickstart] before you follow this
guide.

### Before you begin

1. Select or create a Google Cloud Platform (GCP) project using the
   [manage resource page][resource-link]. Make a note of the project id, you
   will need to use it later.
2. Make sure that [billing is enabled][billing-link] for your project.
3. Learn about [key terms and concepts][concepts-link] for Cloud Storage.
4. Setup the authentication for the examples:
   - [Configure a service account][authentication-quickstart],
   - or [login with your personal account][gcloud-quickstart]

### Downloading and Compiling the C++ Client Library

The source code for the Cloud Storage C++ Client Library can be found on
[GitHub][github-link]. Download or clone this repository as usual:

```
git clone https://github.com/googleapis/google-cloud-cpp.git
```

The top-level README file in this repository includes detailed instructions on
how to compile the library. The examples used in this guide should be
automatically compiled when you follow said instructions.

### Configuring authentication for the C++ Client Library

This library uses the `GOOGLE_APPLICATION_CREDENTIALS` environment variable to
find the credentials file. For example:

#### Linux/macOS with Bash/zsh/ksh/etc.

@code
export GOOGLE_APPLICATION_CREDENTIALS=[PATH]
@endcode

#### Linux/macOS with sh

@code
GOOGLE_APPLICATION_CREDENTIALS=[PATH]; export GOOGLE_APPLICATION_CREDENTIALS
@endcode

#### Linux/macOS with csh/tcsh

@code
setenv GOOGLE_APPLICATION_CREDENTIALS [PATH]
@endcode

#### Windows Powershell

@code
$env:GOOGLE_APPLICATION_CREDENTIALS=[PATH]
@endcode

#### Windows with Command Prompt

@code
set GOOGLE_APPLICATION_CREDENTIALS=[PATH]
@endcode

This is the recommended way to configure the
authentication preferences, though if the environment variable is not set, the
library searches for a credentials file in the same location as the [Cloud
SDK](https://cloud.google.com/sdk/).

### Create a bucket

This is a short example to create a
[GCS bucket](https://cloud.google.com/storage/docs/key-terms#buckets).
This example assumes you have configured the authentication using
`GOOGLE_APPLICATION_CREDENTIALS`:

@snippet storage_quickstart.cc full quickstart

This quickstart will always create a **regional** bucket in the **us-east1**
region. You must provide the project id and bucket name in the command-line when
you run the quickstart program. Assuming you followed the build instructions
referenced above this would be:

@code
./build-output/google/cloud/storage/examples/quick_start [BUCKET_NAME] [PROJECT_ID]
@endcode

### Using GOOGLE_CLOUD_PROJECT to set the default project

Some of the GCS APIs need a [project][project-definition-link] as a parameter.
For such APIs the application can (a) call an overload that takes the project id
as a parameter, (b) define the project explicitly when the `Client` object is
constructed, or (c) set the `GOOGLE_CLOUD_PROJECT` environment variable to the
desired project id. If you have set this environment variable the code can
be even simpler:

@snippet storage_bucket_samples.cc create bucket

### Using the library in your own projects

Our continuous integration builds compile and test the code using both
[Bazel](https://bazel.build/), and [CMake](https://cmake.org/). Integrating the
GCS C++ Client library should be easy if you use either.

#### Integrating with Bazel

Select the [google-cloud-cpp release](https://github.com/googleapis/google-cloud-cpp/releases)
you want to use. The release notes should include the expected SHA256 checksum
of the tarball (and zip) files, make a note of them.

In your [WORKSPACE][workspace-definition-link] file add a dependency to download
and install the library, for example:

[workspace-definition-link]: https://docs.bazel.build/versions/master/build-ref.html#packages_targets

@code {.py}
# Change the version and SHA256 hash as needed.
http_archive(
    name = "com_github_googleapis_google_cloud_cpp",
    url = "http://github.com/googleapis/google-cloud-cpp/archive/v0.5.0.tar.gz",
    sha256 = "886bcba3616d5f362838a2d86ae0198dd3670a84a84c82291cda6c30e14779fc"
)
@endcode

Then load the dependencies of the library:

```{.py}
load("@com_github_googleapis_google_cloud_cpp//bazel:google_cloud_cpp_deps.bzl", "google_cloud_cpp_deps")
google_cloud_cpp_deps()
# Have to manually call the corresponding function for gRPC:
#   https://github.com/bazelbuild/bazel/issues/1550
load("@com_github_grpc_grpc//bazel:grpc_deps.bzl", "grpc_deps")
grpc_deps()
```

You can now use the library as a dependency in your BUILD files, for example:

```{.py}
cc_binary(
    name = "my_program",
    srcs = [
        "my_program.cc",
    ],
    deps = [
        "@com_github_googleapis_google_cloud_cpp//google/cloud/storage:storage_client",
    ],
)
```

#### Integrating with CMake

@note This assumes that you have downloaded and installed the dependencies of
  the library. Please check the top-level README on [GitHub][github-link] for
  details.

Compile and install the library using the normal cycle:

```
cd google-cloud-cpp
cmake -H. -Bbuild-output
cmake --build build-output/google/cloud/storage -- -j $(nproc)
cmake --build build-output/google/cloud/storage --target install
```

Now that the library is installed, you can use it in your CMake list files:

```
find_package(Threads REQUIRED)
find_package(CURL REQUIRED)
find_package(storage_client 0.4.0 REQUIRED)

add_executable(my_program my_program.cc)
target_link_libraries(my_program storage_client)
```

### Error Handling

This library never throws exceptions to signal error. In general, the library
returns a
[`StatusOr<T>`](https://github.com/googleapis/google-cloud-cpp/blob/master/google/cloud/status_or.h)
if an error is possible.
Some functions return objects that
already have an existing error handling mechanism, such as types derived from
`std::ostream` where the application can check the
[state flags](https://en.cppreference.com/w/cpp/io/basic_ios/rdstate)
to determine if there was an error.
In these cases no `StatusOr` wrapper is used.

@par Error Handling Example (without exceptions):

Application developers that cannot or prefer not to use exceptions to signal
errors can check if the `StatusOr<T>` contains an error using `.ok()`. The error
details are available using the `.status()` member function. If the
`StatusOr<T>` does not contain an error then the application can use the
`StatusOr<T>` as a smart pointer to `T`, that is, `operator->()` and
`operator*()` work as you would expect. Note that accessing the value of a
`StatusOr<T>` that contains an error is undefined behavior.

@code {.cpp}
using namespace google::cloud;
[](storage::Client client) {
  StatusOr<storage::BucketMetadata> metadata = client.GetBucketMetadata(
      "my-bucket");

  if (!metadata.ok()) {
    std::cerr << "Error retrieving metadata for my-bucket: "
              << metadata.status() << std::endl;
    return;
  }

  // here, use `metadata` as a smart pointer to `T`, for example:
  std::cout << "The bucket " << metadata->name()
            << " default storage class is " << metadata->storage_class()
            << "\n";

  // alternatively capture as a local variable and use normally:
  storage::BucketMetadata bucket_metadata = *metadata;
  std::cout << "Full metadata: " << bucket_metadata << "\n";
}
@endcode

@par Error Handling Example (with exceptions):

Applications that prefer to use
exceptions to signal errors can simply call `.value()` on the `StatusOr<T>`
object. This will return a `T` if there was no error, and throw an exception if
the `StatusOr<T>` object contains an error.

@code {.cpp}
using namespace google::cloud;
[](storage::Client client) {
  storage::BucketMetadata metadata = client.GetBucketMetadata(
        "my-bucket").value(); // throws on error
}
@endcode

### Retry, Backoff, and Idempotency Policies.

The library automatically retries requests that fail with transient errors, and
follows the
[recommended practice](https://cloud.google.com/storage/docs/exponential-backoff)
to backoff between retries. Application developers can override the default
[retry](@ref google::cloud::storage::v0::RetryPolicy) and
[backoff](@ref google::cloud::storage::v0::BackoffPolicy) policies:

@snippet storage_object_samples.cc insert object modified retry

The default policies are to continue retrying for up to 15 minutes, and to
use truncated (at 5 minutes) exponential backoff, doubling the maximum backoff
period between retries.

By default the library retries all operations, even those that are not
idempotent. Application developers can override the
[idempotency policy](@ref google::cloud::storage::v0::Client::Client)
to follow a more conservative approach:

@snippet storage_object_samples.cc insert object strict idempotency

@see [`LimitedTimeRetryPolicy`](@ref google::cloud::storage::v0::LimitedTimeRetryPolicy]
   and [`LimitedErrorCountRetryPolicy`](@ref google::cloud::storage::v0::LimitedErrorCountRetryPolicy)
   for alternative retry policies.

@see [`ExponentialBackoffPolicy`](@ref google::cloud::storage::v0::ExponentialBackoffPolicy)
   to configure different parameters for the exponential backoff policy.

@see [`AlwaysRetryIdempotencyPolicy`](@ref google::cloud::storage::v0::AlwaysRetryIdempotencyPolicy)
   and [`StrictIdempotencyPolicy`](@ref google::cloud::storage::v0::StrictIdempotencyPolicy)
   for alternative idempotency policies.

### Next Steps

The documentation for each member function in the [Client] class includes short
snippets on how to call the function. The snippets for
[ReadObject()][ReadObject], [WriteObject()][WriteObject],
[ListObjects()][ListObjects], and [DeleteObject()][DeleteObject] are
good places to continue learning about the library.

[Client]: @ref google::cloud::storage::v0::Client
[ReadObject]: @ref google::cloud::storage::v0::Client::ReadObject()
[WriteObject]: @ref google::cloud::storage::v0::Client::WriteObject()
[ListObjects]: @ref google::cloud::storage::v0::Client::ListObjects()
[DeleteObject]: @ref google::cloud::storage::v0::Client::DeleteObject()


[gcs-quickstart]: https://cloud.google.com/storage/docs/quickstarts 'GCS Quickstarts'
[resource-link]: https://console.cloud.google.com/cloud-resource-manager 'Console Resource Manager'
[billing-link]: https://cloud.google.com/billing/docs/how-to/modify-project 'How to: Modify Project'
[concepts-link]: https://cloud.google.com/storage/docs/concepts 'GCS Concepts'
[authentication-quickstart]: https://cloud.google.com/docs/authentication/getting-started 'Authentication Getting Started'
[gcloud-quickstart]: https://cloud.google.com/sdk/docs/quickstarts
[bucket-definition-link]: https://cloud.google.com/storage/docs/key-terms#buckets
[object-definition-link]: https://cloud.google.com/storage/docs/key-terms#objects
[project-definition-link]: https://cloud.google.com/storage/docs/projects 'Project Definition in GCS'
[github-link]: https://github.com/googleapis/google-cloud-cpp 'GitHub Repository'
<!-- The ugly %2E disables auto-linking in Doxygen -->
[github-readme]: http://github.com/googleapis/google-cloud-cpp/blob/master/README%2Emd

*/
