#!/usr/bin/env python3
# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Summarize the results from running storage_throughput_benchmark."""

# %%
import argparse
import pandas as pd
import plotnine as p9
from scipy.stats import mannwhitneyu


# %%
pd.set_option('precision', 2)


# %%
def load_benchmark_output(file):
    """Loads the output generated by storage_throughput_benchmark."""
    df = pd.read_csv(file, comment='#', names=['Op', 'Api', 'Bytes', 'ElapsedMs'])
    df['MiB'] = df.Bytes / 1024 / 1024
    df['MiBs'] = df.MiB * 1000 / df.ElapsedMs
    return df


# %%
def compare_api(df, op_name, alpha=0.05):
    subset = df[df.Op == op_name]
    stat, p = mannwhitneyu(subset[subset.Api == 'XML'].MiBs, subset[subset.Api == 'JSON'].MiBs)
    print('\n\n===== %s XML vs. JSON =====\np-value=%.3f   Statistics=%.3f' % (op_name, p, stat))
    print(subset.groupby(by='Api').MiBs.describe(percentiles=[.50, .90, .95]))

    if p > alpha:
        print('%s/XML vs. READ/JSON: same distribution (fail to reject H0)' % op_name)
    else:
        print('%s/XML vs. READ/JSON: different distribution (reject H0)' % op_name)


# %%
parser = argparse.ArgumentParser()
parser.add_argument('--input-file', type=argparse.FileType('r'), required=True,
                    help='the benchmark output file to load')
parser.add_argument('--output-file', type=str, required=True,
                    help='the name for the output plot')
args = parser.parse_args()

# %%
data = load_benchmark_output(args.input_file)

# %%
print(data.head())

# %%
print(data.describe())

# %%
(p9.ggplot(data=data[(data.Op != 'CREATE') & (data.Op != 'DELETE')],
           mapping=p9.aes(x='Op', y='MiBs', color='Api'))
 + p9.facet_wrap(facets='Op', labeller='label_both', scales='free')
 + p9.geom_boxplot()).save(args.output_file)

# %%
compare_api(data, 'READ')
compare_api(data, 'WRITE')
