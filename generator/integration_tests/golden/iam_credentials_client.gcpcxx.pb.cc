// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: generator/integration_tests/test.proto

#include "generator/integration_tests/golden/iam_credentials_client.gcpcxx.pb.h"
#include <memory>

namespace google {
namespace cloud {
inline namespace GOOGLE_CLOUD_CPP_NS {
namespace golden {

IAMCredentialsClient::IAMCredentialsClient(std::shared_ptr<IAMCredentialsConnection> connection) : connection_(std::move(connection)) {}
IAMCredentialsClient::~IAMCredentialsClient() = default;

StatusOr<::google::test::admin::database::v1::GenerateAccessTokenResponse>
IAMCredentialsClient::GenerateAccessToken(std::string const& name, std::vector<std::string> const& delegates, std::vector<std::string> const& scope, ::google::protobuf::Duration const& lifetime) {
  ::google::test::admin::database::v1::GenerateAccessTokenRequest request;
  request.set_name(name);
  *request.mutable_delegates() = {delegates.begin(), delegates.end()};
  *request.mutable_scope() = {scope.begin(), scope.end()};
  *request.mutable_lifetime() = lifetime;
  return connection_->GenerateAccessToken(request);
}

StatusOr<::google::test::admin::database::v1::GenerateIdTokenResponse>
IAMCredentialsClient::GenerateIdToken(std::string const& name, std::vector<std::string> const& delegates, std::string const& audience, bool include_email) {
  ::google::test::admin::database::v1::GenerateIdTokenRequest request;
  request.set_name(name);
  *request.mutable_delegates() = {delegates.begin(), delegates.end()};
  request.set_audience(audience);
  request.set_include_email(include_email);
  return connection_->GenerateIdToken(request);
}

StatusOr<::google::test::admin::database::v1::WriteLogEntriesResponse>
IAMCredentialsClient::WriteLogEntries(std::string const& log_name, std::map<std::string, std::string> const& labels) {
  ::google::test::admin::database::v1::WriteLogEntriesRequest request;
  request.set_log_name(log_name);
  *request.mutable_labels() = {labels.begin(), labels.end()};
  return connection_->WriteLogEntries(request);
}

ListLogsRange
IAMCredentialsClient::ListLogs(std::string const& parent) {
  ::google::test::admin::database::v1::ListLogsRequest request;
  request.set_parent(parent);
  return connection_->ListLogs(request);
}

StatusOr<::google::test::admin::database::v1::GenerateAccessTokenResponse>
IAMCredentialsClient::GenerateAccessToken(::google::test::admin::database::v1::GenerateAccessTokenRequest const& request) {
  return connection_->GenerateAccessToken(request);
}

StatusOr<::google::test::admin::database::v1::GenerateIdTokenResponse>
IAMCredentialsClient::GenerateIdToken(::google::test::admin::database::v1::GenerateIdTokenRequest const& request) {
  return connection_->GenerateIdToken(request);
}

StatusOr<::google::test::admin::database::v1::WriteLogEntriesResponse>
IAMCredentialsClient::WriteLogEntries(::google::test::admin::database::v1::WriteLogEntriesRequest const& request) {
  return connection_->WriteLogEntries(request);
}

ListLogsRange
IAMCredentialsClient::ListLogs(::google::test::admin::database::v1::ListLogsRequest request) {
  return connection_->ListLogs(std::move(request));
}

}  // namespace golden
}  // namespace GOOGLE_CLOUD_CPP_NS
}  // namespace cloud
}  // namespace google

