# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

ARG DISTRO_VERSION=32
FROM fedora:${DISTRO_VERSION}

# Install the minimal packages needed to compile libcxx, install Bazel, and
# then compile our code.
RUN dnf makecache && \
    dnf install -y clang clang-tools-extra cmake findutils gcc-c++ git \
        llvm llvm-devel make ninja-build openssl-devel python3 python3-devel \
        python3-lit python3-pip tar unzip which wget xz

# Sets root's password to the empty string to enable users to get a root shell
# inside the container with `su -` and no password. Sudo would not work because
# we run these containers as the invoking user's uid, which does not exist in
# the container's /etc/passwd file.
RUN echo 'root:' | chpasswd

# Install the Python modules needed to run the storage testbench
RUN pip3 install --upgrade pip
RUN pip3 install setuptools
RUN pip3 install Jinja2==2.11.2 MarkupSafe==1.1.1 Werkzeug==1.0.1 \
    blinker==1.4 brotlipy==0.7.0 cffi==1.14.3 crc32c==2.1 decorator==4.4.2 \
    flask==1.1.2 gevent==20.9.0 greenlet==0.4.17 gunicorn==20.0.4 \
    httpbin==0.7.0 itsdangerous==1.1.0 pycparser==2.20 raven==6.10.0 \
    zope.event==4.5.0 zope.interface==5.1.0

WORKDIR /var/tmp/build
RUN wget -q https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/libcxx-10.0.0.src.tar.xz
RUN tar -xf libcxx-10.0.0.src.tar.xz
RUN wget -q https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/libcxxabi-10.0.0.src.tar.xz
RUN tar -xf libcxxabi-10.0.0.src.tar.xz

# To build libc++abi we need to bootstrap libc++ without libc++abi first:
RUN cmake -Hlibcxx-10.0.0.src -B.boot-libcxx -GNinja -Wno-dev \
    -DLLVM_USE_SANITIZER=Memory -DLLVM_EXTERNAL_LIT=/usr/bin/lit \
    -DLLVM_CONFIG_PATH=/usr/bin/llvm-config \
    -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release  \
    -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang
RUN cmake --build .boot-libcxx --target cxx
RUN cmake --build .boot-libcxx --target install-cxx

# Compile libc++abi using the bootstrap version
RUN cmake -Hlibcxxabi-10.0.0.src -B.build-libcxxabi -GNinja -Wno-dev \
    -DLIBCXXABI_LIBCXX_PATH=/var/tmp/build/libcxx-10.0.0.src \
    -DLLVM_USE_SANITIZER=Memory -DLLVM_EXTERNAL_LIT=/usr/bin/lit \
    -DLLVM_CONFIG_PATH=/usr/bin/llvm-config \
    -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release  \
    -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang
RUN cmake --build .build-libcxxabi --target install-cxxabi

# After libc++abi is installed, compile test and install the libc++ library
# again.
RUN cmake -Hlibcxx-10.0.0.src -B.build-libcxx -GNinja -Wno-dev \
    -DLIBCXX_CXX_ABI=libcxxabi \
    -DLIBCXX_CXX_ABI_INCLUDE_PATHS=/var/tmp/build/libcxxabi-10.0.0.src/include \
    -DLLVM_USE_SANITIZER=Memory -DLLVM_EXTERNAL_LIT=/usr/bin/lit \
    -DLLVM_CONFIG_PATH=/usr/bin/llvm-config \
    -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release  \
    -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang
# The tests for libcxx do not pass, mostly around the filesystem library, which
# we do not care about.
RUN cmake --build .build-libcxx --target cxx
RUN cmake --build .build-libcxx --target install-cxx

# Install the Cloud SDK and some of the emulators. We use the emulators to run
# integration tests for the client libraries.
COPY . /var/tmp/ci
WORKDIR /var/tmp/downloads
RUN /var/tmp/ci/install-cloud-sdk.sh
# The Cloud Pub/Sub emulator needs Java :shrug:
RUN dnf makecache && dnf install -y java-latest-openjdk

# We need Bazel for this build.
COPY . /var/tmp/ci
RUN /var/tmp/ci/install-bazel.sh
