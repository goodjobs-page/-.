# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

ARG DISTRO_VERSION=33
FROM fedora:${DISTRO_VERSION} AS devtools
ARG NCPU=4

#
# Unlike the other files in this directory, this is not used to
# generate the packaging instructions, just to test that the
# cmake --install ... --component ... stuff works.
#

RUN dnf makecache && \
    dnf install -y ccache cmake gcc-c++ git make openssl-devel pkgconfig \
        zlib-devel
RUN dnf makecache && \
    dnf install -y grpc-devel grpc-plugins \
        libcurl-devel protobuf-compiler tar wget zlib-devel

ENV PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig

WORKDIR /var/tmp/build
RUN wget -q https://github.com/abseil/abseil-cpp/archive/20200923.3.tar.gz && \
    tar -xf 20200923.3.tar.gz && \
    cd abseil-cpp-20200923.3 && \
    sed -i 's/^#define ABSL_OPTION_USE_\(.*\) 2/#define ABSL_OPTION_USE_\1 0/' "absl/base/options.h" && \
    cmake \
      -DCMAKE_BUILD_TYPE=Release \
      -DBUILD_TESTING=OFF \
      -DBUILD_SHARED_LIBS=yes \
      -DCMAKE_CXX_STANDARD=11 \
      -H. -Bcmake-out && \
    cmake --build cmake-out -- -j ${NCPU:-4} && \
    cmake --build cmake-out --target install -- -j ${NCPU:-4} && \
    ldconfig

WORKDIR /var/tmp/build
RUN wget -q https://github.com/google/crc32c/archive/1.1.0.tar.gz && \
    tar -xf 1.1.0.tar.gz && \
    cd crc32c-1.1.0 && \
    cmake \
        -DCMAKE_BUILD_TYPE=Release \
        -DBUILD_SHARED_LIBS=yes \
        -DCRC32C_BUILD_TESTS=OFF \
        -DCRC32C_BUILD_BENCHMARKS=OFF \
        -DCRC32C_USE_GLOG=OFF \
        -H. -Bcmake-out && \
    cmake --build cmake-out -- -j ${NCPU:-4} && \
    cmake --build cmake-out --target install -- -j ${NCPU:-4} && \
    ldconfig

WORKDIR /var/tmp/build
RUN wget -q https://github.com/nlohmann/json/archive/v3.9.0.tar.gz && \
    tar -xzf v3.9.0.tar.gz && \
    cd json-3.9.0 && \
    cmake \
      -DCMAKE_BUILD_TYPE=Release \
      -DBUILD_SHARED_LIBS=yes \
      -DBUILD_TESTING=OFF \
      -H. -Bcmake-out/nlohmann/json && \
    cmake --build cmake-out/nlohmann/json --target install -- -j ${NCPU} && \
    ldconfig

# We can now compile, test, and install `google-cloud-cpp`.

FROM devtools AS with-project-source

WORKDIR /home/build/project
COPY . /home/build/project

ENV CCACHE_DIR=/h/.ccache
RUN mkdir -p /h/.ccache; \
    echo "max_size = 4.0G" >"/h/.ccache/ccache.conf"; \
    if [ -r "ci/kokoro/install/ccache-contents/${DISTRO}.tar.gz" ]; then \
      tar -xf "ci/kokoro/install/ccache-contents/${DISTRO}.tar.gz" -C /h; \
      ccache --show-stats; \
      ccache --zero-stats; \
    fi; \
    true # Ignore all errors, failures in caching should not break the build

RUN cmake -DBUILD_SHARED_LIBS=ON -DBUILD_TESTING=OFF -H. -Bcmake-out
RUN cmake --build cmake-out -- -j "${NCPU:-4}"

# This is the fun part. We will create a "stage" that contains the source
# code and the things installed by the runtime component, and a separate
# layer with the things install by the development component.
# Then we will try to run things compiled in the "with-development-component"
# layer, using only the install installed in the "with-runtime-component"
# layer.

FROM with-project-source AS with-runtime-component
ARG NCPU=4
ARG DISTRO="distro-name"

RUN cmake --install cmake-out --component google_cloud_cpp_runtime

FROM with-runtime-component AS with-development-component

RUN cmake --install cmake-out --component google_cloud_cpp_development

WORKDIR /home/build/verify-current-targets
COPY ci/verify_current_targets /home/build/verify-current-targets
RUN cmake -H. -B/i/verify-current-targets -Wno-dev
RUN cmake --build /i/verify-current-targets -j "${NCPU:-4}"
RUN cmake --build /i/verify-current-targets --target test

WORKDIR /home/build/verify-deprecated-targets
COPY ci/verify_deprecated_targets /home/build/verify-deprecated-targets
RUN cmake -H. -B/i/verify-deprecated-targets -Wno-dev
RUN cmake --build /i/verify-deprecated-targets -j "${NCPU:-4}"
RUN cmake --build /i/verify-deprecated-targets --target test

ENV PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig:/usr/local/lib/pkgconfig

# Verify that the installed files are actually usable
WORKDIR /home/build/pubsub-make
COPY google/cloud/pubsub/quickstart /home/build/pubsub-make
RUN make

WORKDIR /home/build/quickstart-cmake/pubsub
COPY google/cloud/pubsub/quickstart /home/build/quickstart-cmake/pubsub
RUN env -u PKG_CONFIG_PATH cmake -H. -B/i/pubsub
RUN cmake --build /i/pubsub

WORKDIR /home/build/bigquery-make
COPY google/cloud/bigquery/quickstart /home/build/bigquery-make
RUN make

WORKDIR /home/build/quickstart-cmake/bigquery
COPY google/cloud/bigquery/quickstart /home/build/quickstart-cmake/bigquery
RUN env -u PKG_CONFIG_PATH cmake -H. -B/i/bigquery
RUN cmake --build /i/bigquery

WORKDIR /home/build/bigtable-make
COPY google/cloud/bigtable/quickstart /home/build/bigtable-make
RUN make

WORKDIR /home/build/quickstart-cmake/bigtable
COPY google/cloud/bigtable/quickstart /home/build/quickstart-cmake/bigtable
RUN env -u PKG_CONFIG_PATH cmake -H. -B/i/bigtable
RUN cmake --build /i/bigtable

WORKDIR /home/build/storage-make
COPY google/cloud/storage/quickstart /home/build/storage-make
RUN make

WORKDIR /home/build/quickstart-cmake/storage
COPY google/cloud/storage/quickstart /home/build/quickstart-cmake/storage
RUN env -u PKG_CONFIG_PATH cmake -H. -B/i/storage
RUN cmake --build /i/storage

WORKDIR /home/build/spanner-make
COPY google/cloud/spanner/quickstart /home/build/spanner-make
RUN make

WORKDIR /home/build/quickstart-cmake/spanner
COPY google/cloud/spanner/quickstart /home/build/quickstart-cmake/spanner
RUN env -u PKG_CONFIG_PATH cmake -H. -B/i/spanner
RUN cmake --build /i/spanner

# This is just here to speed up the pre-submit builds and should not be part
# of the instructions on how to compile the code.
RUN ccache --show-stats --zero-stats || true

FROM with-runtime-component AS install
ARG NCPU=4
ARG DISTRO="distro-name"

COPY --from=with-development-component /i /i
RUN ldconfig
